TECHNICAL DETAILS OF BUBBLE GAME
===============================

Project Structure:
----------------
backend/
  ─ app.py           (Main server file)
  ─ requirements.txt (Python packages needed)
  ─ migrate_to_mongodb.py (Script to move data to MongoDB)

frontend/public/
  ─ index.html      (Game webpage)
  ─ styles.css      (Game styling)
  ─ script.js       (Game logic)

How the Code Works:
-----------------

1. Backend (app.py):
   - Uses Flask to create a web server
   - Connects to MongoDB database
   - Has 4 main functions:
     * /api/register/ - Creates new player
     * /api/update-highscore/ - Updates player's score
     * /api/player/<username>/ - Gets player info
     * /api/all/ - Gets all players' scores

2. Frontend (script.js):
   - Handles game logic
   - Creates and moves bubbles
   - Tracks score and time
   - Talks to backend using fetch() calls
   - Updates the screen when things change

3. Database (MongoDB):
   - Stores player data in 'players' collection
   - Each player has:
     * username
     * highscore

How Data Flows:
--------------
1. When player starts:
   - Frontend asks for username
   - Sends username to backend
   - Backend creates new player in MongoDB

2. During game:
   - Frontend tracks score
   - When game ends, sends score to backend
   - Backend updates MongoDB if score is higher

3. When viewing scores:
   - Frontend asks backend for scores
   - Backend gets data from MongoDB
   - Sends data back to frontend
   - Frontend shows the scores

Important Files Explained:
------------------------
1. app.py:
   - Main server file
   - Handles all data saving and loading
   - Connects to MongoDB
   - Responds to frontend requests

2. script.js:
   - Contains all game logic
   - Makes bubbles appear and move
   - Handles clicking and scoring
   - Talks to backend

3. index.html:
   - The game webpage
   - Shows the game area
   - Has buttons and score display

4. styles.css:
   - Makes the game look nice
   - Styles bubbles and buttons
   - Handles layout and colors

5. requirements.txt:
   - Lists Python packages needed
   - Flask for server
   - pymongo for database

6. migrate_to_mongodb.py:
   - One-time use script
   - Moves data from JSON to MongoDB